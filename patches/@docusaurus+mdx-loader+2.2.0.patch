diff --git a/node_modules/@docusaurus/mdx-loader/lib/remark/headings/index.js b/node_modules/@docusaurus/mdx-loader/lib/remark/headings/index.js
index 53ad336..c6011ee 100644
--- a/node_modules/@docusaurus/mdx-loader/lib/remark/headings/index.js
+++ b/node_modules/@docusaurus/mdx-loader/lib/remark/headings/index.js
@@ -22,11 +22,15 @@ function plugin() {
                 id = slugs.slug(id, { maintainCase: true });
             }
             else {
-                const headingTextNodes = headingNode.children.filter(({ type }) => !['html', 'jsx'].includes(type));
-                const heading = (0, mdast_util_to_string_1.default)(headingTextNodes.length > 0 ? headingTextNodes : headingNode);
+              const headingTextNodes = headingNode.children.filter(({ type }) => !['html', 'jsx'].includes(type));
+              let heading = (0, mdast_util_to_string_1.default)(headingTextNodes.length > 0 ? headingTextNodes : headingNode);
                 // Support explicit heading IDs
-                const parsedHeading = (0, utils_1.parseMarkdownHeadingId)(heading);
-                id = parsedHeading.id ?? slugs.slug(heading);
+              const parsedHeading = (0, utils_1.parseMarkdownHeadingId)(heading);
+              // if the heading is a semver version number, replace the dots with dashes
+              heading = parseVersionHeading(heading);
+              // remove any spaces that might be cause by things like having icons in the headings
+              heading = heading.trim(); 
+                id = parsedHeading.id ?? slugs.slug(heading, { maintainCase: true });
                 if (parsedHeading.id) {
                     // When there's an id, it is always in the last child node
                     // Sometimes heading is in multiple "parts" (** syntax creates a child
@@ -49,10 +53,19 @@ function plugin() {
                     }
                 }
             }
-            data.id = id;
-            properties.id = id;
+            data.id = id.trim();
+            properties.id = id.trim();
         });
     };
 }
+
+function parseVersionHeading(heading) {
+  const isSemVer = /^[\d]*.?[\d]*.?[\d]*$/g;
+  if (heading.match(isSemVer)) {
+    return heading.replaceAll('.', '-')
+  }
+  return heading
+}
+
 exports.default = plugin;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
