# let's try using orbs, jobs, commands
version: 2.1

env_defaults: &env_defaults
  ## this enables colors + fixes failing unit tests
  TERM: xterm

  npm_config_loglevel: warn
  # even when running as non-root user
  # need to set unsafe perm to be able to do `npm postinstall`
  npm_config_unsafe-perm: true

defaults: &defaults
  working_directory: ~/cypress-documentation
  docker:
    # the Docker image with Cypress dependencies
    # https://github.com/cypress-io/cypress-docker-images
    # Note: the image needs to have fonts with Chinese characters
    - image: cypress/base:8.16.0
      environment:
        <<: *env_defaults

jobs:
  ## code checkout and NPM installs
  build:
    <<: *defaults
    steps:
      - checkout

      ## make sure the TERM is set to 'xterm' in node
      ## else colors (and tests) will fail
      ## See the following information
      ##   - http://andykdocs.de/development/Docker/Fixing+the+Docker+TERM+variable+issue
      ##   - https://unix.stackexchange.com/questions/43945/whats-the-difference-between-various-term-variables
      - run:
          name: Checking TERM is set
          command: |
            echo 'term env var is:' $TERM
            node -e 'assert.equal(process.env.TERM, "xterm", "need TERM to be set for Docker to work")'
            node -e 'console.log("TERM %s stdout.isTTY?", process.env.TERM, process.stdout.isTTY)'

      # need to restore previously caches files, if any to speed up the build
      # we want to use new cache if package or circle files change
      - restore_cache:
          key: v2-deps-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "circle.yml" }}

      - run: npm ci
      # run Cypress verify command to cache its status
      - run: npm run cypress:verify

      # store NPM logs in case there was a problem
      - store_artifacts:
          path: ~/.npm/_logs

      # cache NPM modules and folder with Cypress v3+ binary
      # https://on.cypress.io/continuous-integration
      # this ensures that this job can start quickly next time
      - save_cache:
          key: v2-deps-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "circle.yml" }}
          paths:
            - /root/.npm
            - /root/.cache

      #
      # build the static content
      #
      - run: ls -la
      - run: npm run deps
      - run: npm run lint -- --max-warnings=0
      - run: npm run md-lint
      - run: npm test
      - run: npm run build

      ## save entire folder + Cypress binary as the workspace for other jobs to continue
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress-documentation
            - .cache/Cypress

  "docs-tests":
    <<: *defaults
    parallelism: 4
    steps:
      # restore application and Cypress binary before running the test command
      - attach_workspace:
          at: ~/
      - run: ls -Rl themes/cypress/source/js
      - run:
          command: npm start
          background: true
      - run:
          name: Waiting for local server to start
          command: $(npm bin)/wait-on http://localhost:2222 --interval 1000 --timeout 360000
      - run:
          name: Running Cypress tests
          command: |
            if [ -n "$DOCS_RECORD_KEY" ]; then
              $(npm bin)/cypress run --record --key $DOCS_RECORD_KEY --parallel --group "develop"
            else
              $(npm bin)/cypress run
            fi
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots
      - store_artifacts:
          path: npm-debug.log

  "deploy-docs-staging":
    <<: *defaults
    steps:
      # restore application and Cypress binary before running the test command
      - attach_workspace:
          at: ~/
      - run: npm ls || true
      # need to build the app for STAGING environment
      - run: NODE_ENV=staging npm run build
      - run: ls -Rl themes/cypress/source/js
      - run: ls public
      - run: DEBUG=ggit,deploy npm run deploy-prebuilt -- --environment staging --force
      - run:
          name: Print deployed version
          command: cat public/build.json
      - run:
          name: Test deployed docs
          command: |
            export CYPRESS_baseUrl=https://docs-staging.cypress.io
            if [ -n "$DOCS_RECORD_KEY" ]; then
              $(npm bin)/cypress run --record --key $DOCS_RECORD_KEY --parallel --group "staging" --ci-build-id $CIRCLE_WORKFLOW_ID-$CIRCLE_BUILD_NUM
            else
              $(npm bin)/cypress run
            fi
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots
      - store_artifacts:
          path: npm-debug.log
      # store NPM logs in case there was a problem
      - store_artifacts:
          path: ~/.npm/_logs

  "deploy-docs-production":
    <<: *defaults
    steps:
      # restore application and Cypress binary before running the test command
      - attach_workspace:
          at: ~/
      # need to build the app for PRODUCTION environment
      - run: NODE_ENV=production npm run build
      # because we already built docs for production
      # use script that just deploys without rebuilding the production docs
      - run: npm run deploy-prebuilt -- --environment production --scrape
      - run: cat public/build.json
      - store_artifacts:
          path: npm-debug.log
      # store NPM logs in case there was a problem
      - store_artifacts:
          path: ~/.npm/_logs

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - docs-tests:
          requires:
            - build
      # we can deploy development docs in parallel
      # with unit testing them.
      - deploy-docs-staging:
          filters:
            branches:
              only:
                # allow deploying to staging from "develop"
                # and branches starting with special prefix
                - develop
                - /docs-.*/
          requires:
            - docs-tests
      - deploy-docs-production:
          filters:
            branches:
              only: master
          requires:
            - docs-tests
